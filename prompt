# Technical Documentation: Illumio Traffic Analysis

## Overview

This documentation explains the operation of the traffic analysis module developed for the Illumio API, focusing on traffic flow collection, analysis, and rule evaluation.

## Core Components

- **IllumioTrafficAnalyzer**: Main class orchestrating traffic analysis
- **IllumioAPI**: Manages REST API interactions
- **TrafficAnalysisOperation**: Handles asynchronous traffic analysis operations
- **IllumioDatabase**: Stores analysis data in SQLite

## Traffic Analysis Process

### Phase 1: Initial Traffic Analysis

1. **Query Preparation**:
   - Create analysis query with sources, destinations, services, and policy decisions
   - Either use user parameters or default configuration

2. **Asynchronous Query Submission**:
   - POST to `/traffic_flows/async_queries`
   - Receive unique query ID

3. **Status Monitoring**:
   - Poll `/traffic_flows/async_queries/{query_id}` until status is "completed"

4. **Result Retrieval**:
   - GET from `/traffic_flows/async_queries/{query_id}/download`
   - Store results in database if enabled

### Phase 2: Deep Rule Analysis

1. **Prerequisite Check**:
   - Verify initial traffic query has "completed" status

2. **Rule Analysis Initiation**:
   - PUT to `/traffic_flows/async_queries/{query_id}/update_rules` with parameters:
     - `label_based_rules=false`
     - `offset=0`
     - `limit=100`
   - Receive HTTP 202 (Accepted) with no response body

3. **Rule Analysis Monitoring**:
   - Poll `/traffic_flows/async_queries/{query_id}`
   - Monitor "rules" attribute appearance
   - Wait for rules status to become "completed"

4. **Final Result Retrieval**:
   - GET from `/traffic_flows/async_queries/{query_id}/download`
   - Results now include detailed rule information

## Data Structures

### Traffic Query

```json
{
  "query_name": "Traffic_Analysis_20250319_123045",
  "start_date": "2025-03-12",
  "end_date": "2025-03-19",
  "sources": { "include": [[{"actors": "ams"}]], "exclude": [] },
  "destinations": { "include": [[{"actors": "ams"}]], "exclude": [] },
  "services": { "include": [], "exclude": [] },
  "policy_decisions": ["allowed", "potentially_blocked", "blocked"],
  "max_results": 10000
}
```

### Analysis Results

```json
{
  "src": { "ip": "192.168.1.10", "workload": { "href": "/api/v2/orgs/1/workloads/12345" } },
  "dst": { "ip": "10.0.0.5", "workload": { "href": "/api/v2/orgs/1/workloads/67890" } },
  "service": { "name": "HTTPS", "port": 443, "proto": 6 },
  "policy_decision": "allowed",
  "flow_direction": "outbound",
  "rules": {
    "sec_policy": {
      "href": "/api/v2/orgs/1/sec_policy/active/rule_sets/123/rules/456",
      "name": "Allow Web Traffic"
    }
  }
}
```

## Database Schema

- **traffic_queries**: Stores query metadata (id, status, rules_status)
- **traffic_flows**: Stores individual flows with rule information

## Critical Considerations

1. **Asynchronous Operation Handling**:
   - Traffic analyses are asynchronous and may take minutes
   - Application uses polling with backoff

2. **Rule Analysis Processing**:
   - `update_rules` call returns only HTTP 202 code
   - "rules" attribute may appear as dictionary or string

3. **Error Handling**:
   - Robust error handling at each process step
   - Exponential backoff retry mechanisms

## Use Cases

1. Global traffic analysis
2. Specific flow analysis
3. Security rule verification
4. Excel-based flow analysis

## Extension Points

- Custom query filters
- Export format customization
- Integration with security tools
- Automation via scripts or scheduled tasks